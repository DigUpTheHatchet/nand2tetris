// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Set A-Instruction and C-Instruction flags
    And(a=instruction[15],b=true,out=cInstruct);
    Not(in=cInstruct, out=aInstruct);

    // If A-Instruct, load instruction into A
    // If C-Instruct and A in dest, load aluOut into A
    And(a=cInstruct,b=instruction[5],out=aluLoadA);
    Mux16(a=instruction,b=aluOut,sel=aluLoadA,out=aIn);
    Or(a=aInstruct,b=aluLoadA,out=loadA);
    ARegister(in=aIn,load=loadA,out=aOut,out[0..14]=addressM);

    // If C-Instruct and D in dest, load aluOut into D
    And(a=cInstruct,b=instruction[4],out=loadD);
    DRegister(in=aluOut,load=loadD,out=dOut);

    // Select the value of alu input y (aOut or inM)
    Mux16(a=aOut,b=inM,sel=instruction[12],out=aluInY);
    
    ALU(x=dOut,y=aluInY,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],out=aluOut,out=outM,zr=zr,ng=ng);

    // If C-Instruct and M in dest, set writeM flag
    And(a=cInstruct,b=instruction[3],out=writeM);

    
    And(a=cInstruct,b=jump,out=pcJump);
    DMux4Way(in=true, sel[0]=pcJump, sel[1]=reset,a=pcInc,b=loadFlag);
    And(a=cInstruct,b=loadFlag,out=pcLoad);

    // Assumes that reset bit will take precedence in PC impl, if not do c/d outputs for the DMux
    PC(in=aOut,load=pcLoad,inc=pcInc,reset=reset,out[0..14]=pc);



    // 'jump' pin - decide if we need to jump using three jjj bits and zr,ng outputs from ALU
    DMux4Way(in=true,sel[0]=ng,sel[1]=zr,a=aluOutPos,b=aluOutNeg,c=aluOutZero);
    DMux8Way(in=true,sel=instruction[0..2],a=jnull,b=jgt,c=jeq,d=jge,e=jlt,f=jne,g=jle,h=jmp);

    And(a=jgt,b=aluOutPos,out=jumpPos);
    And(a=jeq,b=aluOutZero,out=jumpZero);

    Or(a=aluOutPos,b=aluOutZero,out=aluOutGteZero);
    And(a=jge,b=aluOutGteZero,out=jumpGteZero);
    And(a=jlt,b=aluOutNeg,out=jumpNeg);

    Not(in=aluOutZero,out=aluOutNotZero);
    And(a=jne,b=aluOutNotZero,out=jumpNotZero);
    Or(a=aluOutNeg,b=aluOutZero,out=aluOutLteZero);
    And(a=jle,b=aluOutLteZero,out=jumpLteZero);

    Or8Way(in[0]=false,in[1]=jumpPos,in[2]=jumpZero,in[3]=jumpGteZero,in[4]=jumpNeg,in[5]=jumpNotZero,in[6]=jumpLteZero,in[7]=jmp,out=jump);
}

